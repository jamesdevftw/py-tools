import tkinter as tk
from tkinter import messagebox

# Function to compress the DNA string using run-length encoding
def compress_dna(dna_sequence):
    # Check if the input string is valid
    if not dna_sequence or any(base not in "ATCG" for base in dna_sequence.upper()):
        messagebox.showerror("Invalid Input", "Please enter a valid DNA sequence consisting of A, T, C, and G.")
        return ""
    
    dna_sequence = dna_sequence.upper()  # Ensure the sequence is in uppercase for consistency
    compressed = []
    count = 1

    # Traverse the DNA string and compress using run-length encoding
    for i in range(1, len(dna_sequence)):
        if dna_sequence[i] == dna_sequence[i - 1]:
            count += 1
        else:
            compressed.append(f"{dna_sequence[i - 1]}{count}")
            count = 1
    compressed.append(f"{dna_sequence[-1]}{count}")  # Append the last nucleotide and its count

    return "".join(compressed)

# Function to handle the compression button click
def on_compress_button_click():
    dna_sequence = dna_input.get()  # Get the DNA sequence entered by the user
    compressed_sequence = compress_dna(dna_sequence)
    if compressed_sequence:
        result_output.delete(1.0, tk.END)  # Clear previous results
        result_output.insert(tk.END, f"Compressed DNA Sequence: {compressed_sequence}")

# Create the main Tkinter window
root = tk.Tk()
root.title("DNA Sequence Compressor")
root.geometry("500x300")

# Create a label and input field for the DNA sequence
tk.Label(root, text="Enter DNA Sequence (A, T, C, G):").pack(pady=10)
dna_input = tk.Entry(root, width=50)
dna_input.pack(pady=10)

# Create a button to trigger the compression
compress_button = tk.Button(root, text="Compress DNA", command=on_compress_button_click)
compress_button.pack(pady=10)

# Create a Text widget to display the compressed result
result_output = tk.Text(root, height=5, width=50)
result_output.pack(pady=10)

# Start the Tkinter event loop
root.mainloop()
